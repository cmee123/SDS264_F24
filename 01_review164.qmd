---
title: 'Review of Data Science 1'
format:
  pdf: default
editor_options: 
  chunk_output_type: console
---

You can download this .qmd file from [here](https://github.com/joeroith/264_spring_2025/blob/main/01_review164.qmd).  Just hit the Download Raw File button.


### Determinants of COVID vaccination rates

```{r}
#| include: false

library(tidyverse)
vaccine_data <- read_csv("https://joeroith.github.io/264_spring_2025/Data/vaccinations_2021.csv")
```

First, a little detour to describe several alternatives for reading in data:

If you navigate to [my Github account](https://github.com/joeroith), and find the `264_spring_2025` repo, there is a Data folder inside.  You can then click on `vacc_Mar21.csv` to see the data we want to download.   [This link](https://github.com/joeroith/264_spring_2025/blob/main/Data/vaccinations_2021.csv) should also get you there, but it's good to be able to navigate there yourself.

```{r}
#| eval: false

# Approach 1
vaccine_data <- read_csv("Data/vaccinations_2021.csv")  #<1>

# Approach 2
vaccine_data <- read_csv("~/264_spring_2025/Data/vaccinations_2021.csv")  #<2>

# Approach 3
vaccine_data <- read_csv("https://joeroith.github.io/264_spring_2025/Data/vaccinations_2021.csv")  #<3>

# Approach 4
vaccine_data <- read_csv("https://raw.githubusercontent.com/joeroith/264_spring_2025/refs/heads/main/Data/vaccinations_2021.csv")  #<4>

```

1. Approach 1: create a Data folder in the same location where this .qmd file resides, and then store vaccinations_2021.csv in that Data folder
2. Approach 2: give R the complete path to the location of vaccinations_2021.csv, starting with Home (~)
3. Approach 3: link to our course webpage, and then know we have a Data folder containing all our csvs
4. Approach 4: navigate to the data in GitHub, hit the Raw button, and copy that link


A recent Stat 272 project examined determinants of covid vaccination rates at the county level.  Our data set contains 3053 rows (1 for each county in the US) and 14 columns; here is a quick description of the variables we'll be using:

- `state` = state the county is located in
- `county` = name of the county
- `region` = region the state is located in
- `metro_status` = Is the county considered "Metro" or "Non-metro"?
- `rural_urban_code` = from 1 (most urban) to 9 (most rural)
- `perc_complete_vac` = percent of county completely vaccinated as of 11/9/21
- `tot_pop` = total population in the county
- `votes_Trump` = number of votes for Trump in the county in 2020
- `votes_Biden` = number of votes for Biden in the county in 2020
- `perc_Biden` = percent of votes for Biden in the county in 2020
- `ed_somecol_perc` = percent with some education beyond high school (but not a Bachelor's degree)
- `ed_bachormore_perc` = percent with a Bachelor's degree or more
- `unemployment_rate_2020` = county unemployment rate in 2020
- `median_HHincome_2019` = county's median household income in 2019


1. Consider only Minnesota and its surrounding states (Iowa, Wisconsin, North Dakota, and South Dakota).  We want to examine the relationship between the percentage who voted for Biden and the percentage of complete vaccinations by state.  Generate two plots to examine this relationship:

a) A scatterplot with points and smoothers colored by state.  Make sure the legend is ordered in a meaningful way, and include good labels on your axes and your legend.  Also leave off the error bars from your smoothers.

```{r}
vaccine_data |> 
  filter(state %in% c("Minnesota", "Iowa", "North Dakota", "South Dakota", "Wisconsin")) |> 
  ggplot(aes(x=perc_Biden, y=perc_complete_vac, color = fct_reorder2(state, perc_Biden, perc_complete_vac))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(x = "Percentage Who Voted for Biden", y = "Percent of Complete Vaccination", title = "Percentage Who Voted for Biden vs Percentage of Complete Vaccinations by State", color = "State")
```


b) One plot per state containing a scatterplot and a smoother.

```{r}
vaccine_data |> 
  filter(state %in% c("Minnesota", "Iowa", "North Dakota", "South Dakota", "Wisconsin")) |> 
  ggplot(aes(x=perc_Biden, y=perc_complete_vac)) +
  facet_wrap(~state)+
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(x = "Percentage Who Voted for Biden", y = "Percent of Complete Vaccination", title = "Percentage Who Voted for Biden vs Percentage of Complete Vaccinations by State")
```


Describe which plot you prefer and why.  What can you learn from your preferred plot?

I prefer the second plot that has a different plot for each state. The first one is so busy, that I have a hard time picking out trends for the individual states. The second one allows us to analyze the trend for each individual state, and compare the shapes of the smoothers, which tells us that the relationship between votes for biden and vaccination rates is not the same for all states. 


4. Produce 3 different plots for illustrating the relationship between the rural_urban_code and percent vaccinated.  Hint: you can sometimes turn numeric variables into categorical variables for plotting purposes (e.g. `as.factor()`, `ifelse()`).

```{r}

vaccine_data |> 
  mutate(half_vax = ifelse(perc_complete_vac > 50.0, "Vaccinated", "Not Vaccinated")) |> 
  ggplot(aes(x=rural_urban_code)) +
  geom_bar(aes(fill=half_vax))

vaccine_data |> 
  mutate(half_vax = ifelse(perc_complete_vac > 50.0, "Vaccinated", "Not Vaccinated")) |> 
  ggplot(aes(x=half_vax, fill = half_vax)) +
  geom_bar() +
  facet_wrap(~rural_urban_code)

vaccine_data |>
  group_by(rural_urban_code) |> 
  summarise(mean_vac = mean(perc_complete_vac)) |> 
  ggplot(aes(x=rural_urban_code, y=mean_vac)) +
  geom_bar(stat = "identity")



```


State your favorite plot, why you like it better than the other two, and what you can learn from your favorite plot.  Create an alt text description of your favorite plot, using the Four Ingredient Model.  See [this link](https://drive.google.com/file/d/1BuEbL6vETBcFULmtlrwwZBUYhdEg0Zqb/view?usp=sharing) for reminders and references about alt text.

I think my favorite graph is the 3rd one because you can easily compare how the vaccination rate changes based on the different rural/urban codes.

Alt Text: 

This is a bar chart with rural/urban code on the X axis, ranging from 1-9, and mean vaccination rate on the Y axis, ranging from 0-55 percent. This graph tells us that "larger" rural/urban codes generally mean a decrease in mean vaccination rate. 


5. BEFORE running the code below, sketch the plot that will be produced by R.  AFTER running the code, describe what conclusion(s) can we draw from this plot?  

This plot shows the IQR of the percentage that voted for biden. We can conclude that the distribution of percent of votes for biden is different between the states, so there are other factors in the equation besides random distribution.

```{r}
#| eval: FALSE

vaccine_data |>
  filter(!is.na(perc_Biden)) |>
  mutate(big_states = fct_lump(state, n = 10)) |>
  group_by(big_states) |>
  summarize(IQR_Biden = IQR(perc_Biden)) |>
  mutate(big_states = fct_reorder(big_states, IQR_Biden)) |>
  ggplot() + 
    geom_point(aes(x = IQR_Biden, y = big_states))
```


6. In this question we will focus only on the 12 states in the Midwest (i.e. where region == "Midwest").

a) Create a tibble with the following information for each state.  Order states from least to greatest state population.

- number of different `rural_urban_code`s represented among the state's counties (there are 9 possible)
- total state population
- proportion of Metro counties
- median unemployment rate 


```{r}

codes <- vaccine_data |>  
  filter(region == "Midwest") |> 
  count(state, rural_urban_code) |> 
  count(state) |> 
  mutate("num_rural_codes" = n) |> 
  select(!n)

pops <- vaccine_data |> 
  filter(region == "Midwest") |>
  select(state, tot_pop) |> 
  group_by(state) |> 
  mutate(state_pop = sum(tot_pop)) |> 
  count(state_pop) |> 
  select(!n)

props <- vaccine_data |> 
  filter(region == "Midwest") |>
  group_by(state) |> 
  count(metro_status) |> 
  mutate(total_counties = sum(n)) |>
  filter(metro_status == "Metro") |> 
  mutate(pct_metro = n / total_counties, pct_non_metro = 1 - (n/total_counties)) |> 
  select(state, pct_metro, pct_non_metro)
  
unemp <- vaccine_data |> 
  filter(region == "Midwest") |> 
  select(state, unemployment_rate_2020) |> 
  group_by(state) |> 
  summarise(med_unemployment_rate = median(unemployment_rate_2020))
  

output_tbl <- codes |> 
  full_join(pops) |> 
  full_join(props) |> 
  full_join(unemp) |> 
  arrange(desc(state_pop))
  
```


b) Use your tibble in (a) to produce a plot of the relationship between proportion of Metro counties and median unemployment rate.  Points should be colored by the number of different `rural_urban_code`s in a state, but a single linear trend should be fit to all points.  What can you conclude from the plot?

We can conclude from this plot that there is a strong, positive relationship between the percent of metro counties and the median unemployment rate.

```{r}
output_tbl |> 
  ggplot(aes(x=pct_metro, y=med_unemployment_rate)) +
  geom_point(aes(color = num_rural_codes)) +
  geom_smooth(se=FALSE, method = "lm")
```


8. Hypothetical R chunk #1:

```{r}
#| eval: false

# Hypothetical R chunk 1
temp <- vaccine_data |>
  mutate(new_perc_vac = ifelse(perc_complete_vac > 95, NA, perc_complete_vac),
         MD_group = cut_number(people_per_MD, 3)) |>
  group_by(MD_group) |>
  summarise(n = n(),
            mean_perc_vac = mean(new_perc_vac, na.rm = TRUE),
            mean_white = mean(perc_white, na.rm = TRUE))
```  

a) Describe the tibble `temp` created above.  What would be the dimensions?  What do rows and columns represent?

There would be 4 columns: the MD_group, n (count of previous rows), mean percent vaccinated, and mean percent of white people. There would be 3 rows, one for each MD group, that shows the values for each column for that MD group.

b) What would happen if we replaced `new_perc_vac = ifelse(perc_complete_vac > 95, NA, perc_complete_vac)` with `new_perc_vac = ifelse(perc_complete_vac > 95, perc_complete_vac, NA)`?

All of the percent completed below 95 would be replaced with NA, which means the mean calculated at the end would be super innacurate. This line removes the outliers from that mean calculation, so swithcing the order would make the outliers the only values taken into account. 

c) What would happen if we replaced `mean_white = mean(perc_white, na.rm = TRUE)` with `mean_white = mean(perc_white)`?

Everything would break since you can't calculate mean if there are NAs. This statement removes the NA values when calculating mean, so it works as anticipated.

d) What would happen if we removed `group_by(MD_group)`?

There would only be one row in the table, and the values would be caluclated for every observation in the original table instead of split into the different MD groups. 


9. Hypothetical R chunk #2:

```{r}
#| eval: false

# Hypothetical R chunk 2
ggplot(data = vaccine_data) +
  geom_point(mapping = aes(x = perc_over_65, y = perc_complete_vac, 
                           color = HR_party)) +
  geom_smooth()

temp <- vaccine_data |>
  group_by(HR_party) |>
  summarise(var1 = n()) |>
  arrange(desc(var1)) |>
  slice_head(n = 3)

vaccine_data |>
  ggplot(mapping = aes(x = fct_reorder(HR_party, perc_over_65, .fun = median), 
                       y = perc_over_65)) +
    geom_boxplot()
```

a) Why would the first plot produce an error?

The aes function should be in the ggplot function, because this lays out the dimensions and axis for the graph background. 

b) Describe the tibble `temp` created above.  What would be the dimensions?  What do rows and columns represent?

This table has 3 rows (one for each of the top 3 HR party based on having the largest var1) and 2 columns (number of observations for that HR_party, and the name of the hr_party). 

c) What would happen if we replaced `fct_reorder(HR_party, perc_over_65, .fun = median)` with `HR_party`?

The values would be arranged like crazy and not ordered in a meaningful way.

10. Hypothetical R chunk #3:

```{r}
#| eval: false

# Hypothetical R chunk 3
vaccine_data |>
  filter(!is.na(people_per_MD)) |>
  mutate(state_lump = fct_lump(state, n = 4)) |>
  group_by(state_lump, rural_urban_code) |>
  summarise(mean_people_per_MD = mean(people_per_MD)) |>
  ggplot(mapping = aes(x = rural_urban_code, y = mean_people_per_MD, 
      colour = fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD))) +
    geom_line()
```

a) Describe the tibble piped into the ggplot above.  What would be the dimensions?  What do rows and columns represent?

There would be 36 rows, one for each combination of state and urban code. there could be 3 columns (state_lump, rural_urban_code, and mean_people_per_MD). 

b) Carefully describe the plot created above.

This is a line graph showing the relationship between rural_urban_code and mean_people_per_MD. The color of each line is based on the state_lump, and ordered based on which lump has the highest rural_urban_code and mean_people_per_MD. 

c) What would happen if we removed `filter(!is.na(people_per_MD))`?

We wouldn't be able to calculate the mean if there are still NAs in the dataset.

d) What would happen if we replaced `fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD)` with `state_lump`?

The state_lumps would no longer be ordered in a meaningful way, and everything would therefore be crazy.
